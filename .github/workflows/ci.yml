name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run clippy
      run: cargo clippy -- -D warnings

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release
      run: cargo build --release

    - name: Test CLI parsing (flexai)
      run: |
        # Install flexai for testing (if available)
        if command -v flexai >/dev/null 2>&1; then
          echo "flexai found, testing parsing..."
          ./target/release/clint parse flexai
        else
          echo "flexai not available, testing with help command..."
          ./target/release/clint parse cargo || echo "Expected to fail - testing error handling"
        fi

    - name: Setup Node.js for schema validation
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Validate CLI structure (if generated)
      run: |
        if [ -f "out/flexai/*/flexai-structure.json" ]; then
          node validate-cli-structure.js out/flexai/*/flexai-structure.json
        else
          echo "No CLI structure generated - skipping validation"
        fi

    - name: Test serve generation
      run: |
        if [ -f "out/flexai/*/flexai-structure.json" ]; then
          ./target/release/clint serve out/flexai/*/flexai-structure.json
          ls -la out/*-serve/
        fi

  schema:
    name: Schema Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install JSON Schema validator
      run: npm install -g ajv-cli

    - name: Validate JSON Schema
      run: |
        echo "Validating JSON schema syntax..."
        ajv compile -s cli_structure.schema.json

    - name: Install TypeScript (optional)
      run: npm install -g typescript

    - name: Check TypeScript Schema (if dependencies available)
      run: |
        if [ -f "package.json" ]; then
          npm install || echo "npm install failed - continuing..."
          npx tsc --noEmit cli_structure.zod.ts 2>/dev/null || echo "TypeScript check skipped"
        fi
