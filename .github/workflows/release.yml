name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Get the version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create artifact directory
      run: mkdir -p artifacts

    - name: Copy binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/clint artifacts/clint-${{ needs.create-release.outputs.version }}-${{ matrix.target }}${{ matrix.suffix }}

    - name: Copy binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\clint.exe artifacts\clint-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.exe

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: artifacts/clint-${{ needs.create-release.outputs.version }}-${{ matrix.target }}${{ matrix.suffix }}
        asset_name: clint-${{ needs.create-release.outputs.version }}-${{ matrix.target }}${{ matrix.suffix }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to Crates.io
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  update-schemas:
    name: Update Schema Documentation
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm install -g ajv-cli
        if [ -f "package.json" ]; then
          npm install
        fi

    - name: Validate and process schemas
      run: |
        echo "Validating JSON Schema..."
        ajv compile -s cli_structure.schema.json
        
        echo "Processing TypeScript schema..."
        if [ -f "package.json" ]; then
          npm run build 2>/dev/null || echo "TypeScript build skipped"
        fi

    - name: Generate schema documentation
      run: |
        echo "# Schema Release ${{ needs.create-release.outputs.version }}" > SCHEMA_RELEASE.md
        echo "" >> SCHEMA_RELEASE.md
        echo "## JSON Schema" >> SCHEMA_RELEASE.md
        echo "- File: \`cli_structure.schema.json\`" >> SCHEMA_RELEASE.md
        echo "- Version: ${{ needs.create-release.outputs.version }}" >> SCHEMA_RELEASE.md
        echo "" >> SCHEMA_RELEASE.md
        echo "## Zod Schema" >> SCHEMA_RELEASE.md
        echo "- File: \`cli_structure.zod.ts\`" >> SCHEMA_RELEASE.md
        echo "- Version: ${{ needs.create-release.outputs.version }}" >> SCHEMA_RELEASE.md
        echo "" >> SCHEMA_RELEASE.md
        echo "## Features" >> SCHEMA_RELEASE.md
        echo "- Enhanced metadata support (depth, command_path)" >> SCHEMA_RELEASE.md
        echo "- Optional description field" >> SCHEMA_RELEASE.md
        echo "- Full TypeScript type safety with Zod" >> SCHEMA_RELEASE.md

    - name: Upload schema documentation
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: SCHEMA_RELEASE.md
        asset_name: schema-release-notes.md
        asset_content_type: text/markdown
